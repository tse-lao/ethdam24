{
  "address": "0x44A1E742E3E767478828025CAf4A018d57789b2b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidMaxValues",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxMessages",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVoteOptions",
              "type": "uint256"
            }
          ],
          "internalType": "struct Params.MaxValues",
          "name": "_maxValues",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_maci",
          "type": "address"
        },
        {
          "internalType": "contract TopupCredit",
          "name": "_topupCredit",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pollOwner",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "pollAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3e3f185aae011a967c9595c7539285582722b79a024251726170f7e014e2c55",
  "receipt": {
    "to": null,
    "from": "0x044B595C9b94A17Adc489bD29696af40ccb3E4d2",
    "contractAddress": "0x44A1E742E3E767478828025CAf4A018d57789b2b",
    "transactionIndex": 92,
    "gasUsed": "4327886",
    "logsBloom": "0x
    "blockHash": "0xb6c99b1de1b1e40868791301e638ec843d2dcc4cce71c2d1cd2550db0be48c00",
    "transactionHash": "0xc3e3f185aae011a967c9595c7539285582722b79a024251726170f7e014e2c55",
    "logs": [],
    "blockNumber": 5684654,
    "cumulativeGasUsed": "29914237",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7461aa873cfc3f45ef4ea80bd8190233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidMaxValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxMessages\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVoteOptions\",\"type\":\"uint256\"}],\"internalType\":\"struct Params.MaxValues\",\"name\":\"_maxValues\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_maci\",\"type\":\"address\"},{\"internalType\":\"contract TopupCredit\",\"name\":\"_topupCredit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pollOwner\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pollAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)\":{\"params\":{\"_coordinatorPubKey\":\"The coordinator's public key\",\"_duration\":\"The duration of the poll\",\"_maci\":\"The MACI contract interface reference\",\"_maxValues\":\"The max values for the poll\",\"_pollOwner\":\"The owner of the poll\",\"_topupCredit\":\"The TopupCredit contract\",\"_treeDepths\":\"The depths of the merkle trees\"},\"returns\":{\"pollAddr\":\"The deployed Poll contract\"}}},\"title\":\"PollFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"constructor\":{\"notice\":\"The PollFactory constructor\"},\"deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)\":{\"notice\":\"Deploy a new Poll contract and AccQueue contract for messages.\"}},\"notice\":\"A factory contract which deploys Poll contracts. It allows the MACI contract size to stay within the limit set by EIP-170.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"maci-contracts/contracts/PollFactory.sol\":\"PollFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"maci-contracts/contracts/Poll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { EmptyBallotRoots } from \\\"./trees/EmptyBallotRoots.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\n\\n/// @title Poll\\n/// @notice A Poll contract allows voters to submit encrypted messages\\n/// which can be either votes, key change messages or topup messages.\\n/// @dev Do not deploy this directly. Use PollFactory.deploy() which performs some\\n/// checks on the Poll constructor arguments.\\ncontract Poll is Params, Utilities, SnarkCommon, Ownable, EmptyBallotRoots, IPoll {\\n  using SafeERC20 for ERC20;\\n\\n  /// @notice Whether the Poll has been initialized\\n  bool internal isInit;\\n\\n  /// @notice The coordinator's public key\\n  PubKey public coordinatorPubKey;\\n\\n  /// @notice Hash of the coordinator's public key\\n  uint256 public immutable coordinatorPubKeyHash;\\n\\n  /// @notice the state root of the state merkle tree\\n  uint256 public mergedStateRoot;\\n\\n  // The timestamp of the block at which the Poll was deployed\\n  uint256 internal immutable deployTime;\\n\\n  // The duration of the polling period, in seconds\\n  uint256 internal immutable duration;\\n\\n  /// @notice Whether the MACI contract's stateAq has been merged by this contract\\n  bool public stateAqMerged;\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  uint256 public currentSbCommitment;\\n\\n  /// @notice The number of messages that have been published\\n  uint256 public numMessages;\\n\\n  /// @notice The number of signups that have been processed\\n  /// before the Poll ended (stateAq merged)\\n  uint256 public numSignups;\\n\\n  /// @notice Max values for the poll\\n  MaxValues public maxValues;\\n\\n  /// @notice Depths of the merkle trees\\n  TreeDepths public treeDepths;\\n\\n  /// @notice The contracts used by the Poll\\n  ExtContracts public extContracts;\\n\\n  error VotingPeriodOver();\\n  error VotingPeriodNotOver();\\n  error PollAlreadyInit();\\n  error TooManyMessages();\\n  error MaciPubKeyLargerThanSnarkFieldSize();\\n  error StateAqAlreadyMerged();\\n  error StateAqSubtreesNeedMerge();\\n  error InvalidBatchLength();\\n\\n  event PublishMessage(Message _message, PubKey _encPubKey);\\n  event TopupMessage(Message _message);\\n  event MergeMaciStateAqSubRoots(uint256 _numSrQueueOps);\\n  event MergeMaciStateAq(uint256 _stateRoot, uint256 _numSignups);\\n  event MergeMessageAqSubRoots(uint256 _numSrQueueOps);\\n  event MergeMessageAq(uint256 _messageRoot);\\n\\n  /// @notice Each MACI instance can have multiple Polls.\\n  /// When a Poll is deployed, its voting period starts immediately.\\n  /// @param _duration The duration of the voting period, in seconds\\n  /// @param _maxValues The maximum number of messages and vote options\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _extContracts The external contracts\\n  constructor(\\n    uint256 _duration,\\n    MaxValues memory _maxValues,\\n    TreeDepths memory _treeDepths,\\n    PubKey memory _coordinatorPubKey,\\n    ExtContracts memory _extContracts\\n  ) payable {\\n    // check that the coordinator public key is valid\\n    if (_coordinatorPubKey.x >= SNARK_SCALAR_FIELD || _coordinatorPubKey.y >= SNARK_SCALAR_FIELD) {\\n      revert MaciPubKeyLargerThanSnarkFieldSize();\\n    }\\n\\n    // store the pub key as object then calculate the hash\\n    coordinatorPubKey = _coordinatorPubKey;\\n    // we hash it ourselves to ensure we store the correct value\\n    coordinatorPubKeyHash = hashLeftRight(_coordinatorPubKey.x, _coordinatorPubKey.y);\\n    // store the external contracts to interact with\\n    extContracts = _extContracts;\\n    // store duration of the poll\\n    duration = _duration;\\n    // store max values\\n    maxValues = _maxValues;\\n    // store tree depth\\n    treeDepths = _treeDepths;\\n    // Record the current timestamp\\n    deployTime = block.timestamp;\\n  }\\n\\n  /// @notice A modifier that causes the function to revert if the voting period is\\n  /// not over.\\n  modifier isAfterVotingDeadline() {\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed <= duration) revert VotingPeriodNotOver();\\n    _;\\n  }\\n\\n  /// @notice A modifier that causes the function to revert if the voting period is\\n  /// over\\n  modifier isWithinVotingDeadline() {\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed >= duration) revert VotingPeriodOver();\\n    _;\\n  }\\n\\n  /// @notice The initialization function.\\n  /// @dev Should be called immediately after Poll creation\\n  /// and messageAq ownership transferred\\n  function init() public {\\n    if (isInit) revert PollAlreadyInit();\\n    // set to true so it cannot be called again\\n    isInit = true;\\n\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    // init messageAq here by inserting placeholderLeaf\\n    uint256[2] memory dat = [NOTHING_UP_MY_SLEEVE, 0];\\n\\n    (Message memory _message, PubKey memory _padKey, uint256 placeholderLeaf) = padAndHashMessage(dat, 1);\\n    extContracts.messageAq.enqueue(placeholderLeaf);\\n\\n    emit PublishMessage(_message, _padKey);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function topup(uint256 stateIndex, uint256 amount) public virtual isWithinVotingDeadline {\\n    // we check that we do not exceed the max number of messages\\n    if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\\n\\n    // cannot realistically overflow\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    /// @notice topupCredit is a trusted token contract which reverts if the transfer fails\\n    extContracts.topupCredit.transferFrom(msg.sender, address(this), amount);\\n\\n    uint256[2] memory dat = [stateIndex, amount];\\n    (Message memory _message, , uint256 messageLeaf) = padAndHashMessage(dat, 2);\\n\\n    extContracts.messageAq.enqueue(messageLeaf);\\n\\n    emit TopupMessage(_message);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function publishMessage(Message memory _message, PubKey calldata _encPubKey) public virtual isWithinVotingDeadline {\\n    // we check that we do not exceed the max number of messages\\n    if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\\n\\n    // validate that the public key is valid\\n    if (_encPubKey.x >= SNARK_SCALAR_FIELD || _encPubKey.y >= SNARK_SCALAR_FIELD) {\\n      revert MaciPubKeyLargerThanSnarkFieldSize();\\n    }\\n\\n    // cannot realistically overflow\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    // we enforce that msgType here is 1 so we don't need checks\\n    // at the circuit level\\n    _message.msgType = 1;\\n\\n    uint256 messageLeaf = hashMessageAndEncPubKey(_message, _encPubKey);\\n    extContracts.messageAq.enqueue(messageLeaf);\\n\\n    emit PublishMessage(_message, _encPubKey);\\n  }\\n\\n  /// @notice submit a message batch\\n  /// @dev Can only be submitted before the voting deadline\\n  /// @param _messages the messages\\n  /// @param _encPubKeys the encrypted public keys\\n  function publishMessageBatch(Message[] calldata _messages, PubKey[] calldata _encPubKeys) external {\\n    if (_messages.length != _encPubKeys.length) {\\n      revert InvalidBatchLength();\\n    }\\n\\n    uint256 len = _messages.length;\\n    for (uint256 i = 0; i < len; ) {\\n      // an event will be published by this function already\\n      publishMessage(_messages[i], _encPubKeys[i]);\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) public onlyOwner isAfterVotingDeadline {\\n    // This function cannot be called after the stateAq was merged\\n    if (stateAqMerged) revert StateAqAlreadyMerged();\\n\\n    // merge subroots\\n    extContracts.maci.mergeStateAqSubRoots(_numSrQueueOps, _pollId);\\n\\n    emit MergeMaciStateAqSubRoots(_numSrQueueOps);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMaciStateAq(uint256 _pollId) public onlyOwner isAfterVotingDeadline {\\n    // This function can only be called once per Poll after the voting\\n    // deadline\\n    if (stateAqMerged) revert StateAqAlreadyMerged();\\n\\n    // set merged to true so it cannot be called again\\n    stateAqMerged = true;\\n\\n    // the subtrees must have been merged first\\n    if (!extContracts.maci.stateAq().subTreesMerged()) revert StateAqSubtreesNeedMerge();\\n\\n    mergedStateRoot = extContracts.maci.mergeStateAq(_pollId);\\n\\n    // Set currentSbCommitment\\n    uint256[3] memory sb;\\n    sb[0] = mergedStateRoot;\\n    sb[1] = emptyBallotRoots[treeDepths.voteOptionTreeDepth - 1];\\n    sb[2] = uint256(0);\\n\\n    currentSbCommitment = hash3(sb);\\n\\n    numSignups = extContracts.maci.numSignUps();\\n    emit MergeMaciStateAq(mergedStateRoot, numSignups);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) public onlyOwner isAfterVotingDeadline {\\n    extContracts.messageAq.mergeSubRoots(_numSrQueueOps);\\n    emit MergeMessageAqSubRoots(_numSrQueueOps);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMessageAq() public onlyOwner isAfterVotingDeadline {\\n    uint256 root = extContracts.messageAq.merge(treeDepths.messageTreeDepth);\\n    emit MergeMessageAq(root);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function getDeployTimeAndDuration() public view returns (uint256 pollDeployTime, uint256 pollDuration) {\\n    pollDeployTime = deployTime;\\n    pollDuration = duration;\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function numSignUpsAndMessages() public view returns (uint256 numSUps, uint256 numMsgs) {\\n    numSUps = numSignups;\\n    numMsgs = numMessages;\\n  }\\n}\\n\",\"keccak256\":\"0x8e483116806c49a71b243d777f2a4212b3052aa88acbb670618d6652d80632c6\",\"license\":\"MIT\"},\"maci-contracts/contracts/PollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"./trees/AccQueue.sol\\\";\\nimport { AccQueueQuinaryMaci } from \\\"./trees/AccQueueQuinaryMaci.sol\\\";\\nimport { TopupCredit } from \\\"./TopupCredit.sol\\\";\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\nimport { Poll } from \\\"./Poll.sol\\\";\\nimport { IPollFactory } from \\\"./interfaces/IPollFactory.sol\\\";\\n\\n/// @title PollFactory\\n/// @notice A factory contract which deploys Poll contracts. It allows the MACI contract\\n/// size to stay within the limit set by EIP-170.\\ncontract PollFactory is Params, DomainObjs, IPollFactory {\\n  // The number of children each node in the message tree has\\n  uint256 internal constant TREE_ARITY = 5;\\n\\n  // custom error\\n  error InvalidMaxValues();\\n\\n  /// @notice The PollFactory constructor\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() payable {}\\n\\n  /// @inheritdoc IPollFactory\\n  function deploy(\\n    uint256 _duration,\\n    MaxValues calldata _maxValues,\\n    TreeDepths calldata _treeDepths,\\n    PubKey calldata _coordinatorPubKey,\\n    address _maci,\\n    TopupCredit _topupCredit,\\n    address _pollOwner\\n  ) public virtual returns (address pollAddr) {\\n    /// @notice Validate _maxValues\\n    /// maxVoteOptions must be less than 2 ** 50 due to circuit limitations;\\n    /// it will be packed as a 50-bit value along with other values as one\\n    /// of the inputs (aka packedVal)\\n    if (_maxValues.maxVoteOptions >= (2 ** 50)) {\\n      revert InvalidMaxValues();\\n    }\\n\\n    /// @notice deploy a new AccQueue contract to store messages\\n    AccQueue messageAq = new AccQueueQuinaryMaci(_treeDepths.messageTreeSubDepth);\\n\\n    /// @notice the smart contracts that a Poll would interact with\\n    ExtContracts memory extContracts = ExtContracts({\\n      maci: IMACI(_maci),\\n      messageAq: messageAq,\\n      topupCredit: _topupCredit\\n    });\\n\\n    // deploy the poll\\n    Poll poll = new Poll(_duration, _maxValues, _treeDepths, _coordinatorPubKey, extContracts);\\n\\n    // Make the Poll contract own the messageAq contract, so only it can\\n    // run enqueue/merge\\n    messageAq.transferOwnership(address(poll));\\n\\n    // init Poll\\n    poll.init();\\n\\n    poll.transferOwnership(_pollOwner);\\n\\n    pollAddr = address(poll);\\n  }\\n}\\n\",\"keccak256\":\"0x53f7b3b7adf5a53c3bb85a1697148714399eabfc78f98be1e53f192826900255\",\"license\":\"MIT\"},\"maci-contracts/contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x088cf42d9b7eb3cc3606131bd810feb9edc9b3c78219c0088e6ae6a44632d6a1\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x64a6181ac6e0df316ab26432098f6fc48b2d356f2397d3886f887a13446c7137\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ce2f85d56cec9a08960ebf54fe89a0867deb7f97d3151699ba238848598a1a4\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xfff415a7054b60f0826d0f731aa47b8edf59a1ae485a803ca73b3280855a5cdf\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa5422f08624b09ec1766b8d36ea527ec8af3f76121fa136846a9adc9ea3cc717\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xb27ffc3b4c053ab97006c9d2d634e326a101926f0f704d456cec3d33e5757cc5\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x7e378eb768102153e5153b6f0f8bb08732d6950d0be09d5563973a31cc844fea\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0xdccb710f060330d75763c92bd6828dd2cc891c3ea5a30ce30ae221c177a7eba7\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xea489c5ac94d4f25f6255dbfeed0388c2841ead6d9d5e52a19bc8dd2c27b4d21\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x5046e3e06d927152c6cea0e910af0542bc0178381fd3d9e43b2023ca8ba2f3eb\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\nimport { Params } from \\\"../utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IPollFactory\\n/// @notice PollFactory interface\\ninterface IPollFactory {\\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\\n  /// @param _duration The duration of the poll\\n  /// @param _maxValues The max values for the poll\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _maci The MACI contract interface reference\\n  /// @param _topupCredit The TopupCredit contract\\n  /// @param _pollOwner The owner of the poll\\n  /// @return The deployed Poll contract\\n  function deploy(\\n    uint256 _duration,\\n    Params.MaxValues memory _maxValues,\\n    Params.TreeDepths memory _treeDepths,\\n    DomainObjs.PubKey memory _coordinatorPubKey,\\n    address _maci,\\n    TopupCredit _topupCredit,\\n    address _pollOwner\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xd729956bc34555baae893d62b4234a5cd17463f41737574a8e21def0045c13fc\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable, Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x1f37694c7dcac8552daf04d6561e46c48cbf7c53573032e387db09f3ef9ff0e7\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueueQuinary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"./AccQueue.sol\\\";\\n\\n/// @title AccQueueQuinary\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\n/// @dev This contract is for a quinary tree (5 leaves per node)\\nabstract contract AccQueueQuinary is AccQueue {\\n  /// @notice Create a new AccQueueQuinary instance\\n  constructor(uint256 _subDepth) AccQueue(_subDepth, 5) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @dev it also frees up storage slots to refund gas.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevel(uint256 _level, uint256 _leaf) internal override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n\\n    // Free up storage slots to refund gas. Note that using a loop here\\n    // would result in lower gas savings.\\n    delete leafQueue.levels[_level];\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n  }\\n\\n  /// @notice An internal function which fills a subtree\\n  /// @param _level The level at which to fill the subtree\\n  function _fill(uint256 _level) internal override {\\n    while (_level < subDepth) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != 0) {\\n        // Fill the subtree level with zeros and hash the level\\n        uint256 hashed;\\n\\n        uint256[5] memory inputs;\\n        uint256 z = getZero(_level);\\n        uint8 i = 0;\\n        for (; i < n; i++) {\\n          inputs[i] = leafQueue.levels[_level][i];\\n        }\\n\\n        for (; i < hashLength; i++) {\\n          inputs[i] = z;\\n        }\\n        hashed = hash5(inputs);\\n\\n        // Update the subtree from the next level onwards with the new leaf\\n        _enqueue(hashed, _level + 1);\\n      }\\n\\n      // Reset the current level\\n      delete leafQueue.indices[_level];\\n\\n      _level++;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x41190de249b6964a2c95138c278da46a7e64ecd99d1b0204ab5ee688ab793418\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueueQuinaryMaci.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { MerkleZeros as MerkleQuinaryMaci } from \\\"./zeros/MerkleQuinaryMaci.sol\\\";\\nimport { AccQueueQuinary } from \\\"./AccQueueQuinary.sol\\\";\\n\\n/// @title AccQueueQuinaryMaci\\n/// @notice This contract extends AccQueueQuinary and MerkleQuinaryMaci\\n/// @dev This contract is used for creating a\\n/// Merkle tree with quinary (5 leaves per node) structure\\ncontract AccQueueQuinaryMaci is AccQueueQuinary, MerkleQuinaryMaci {\\n  /// @notice Constructor for creating AccQueueQuinaryMaci contract\\n  /// @param _subDepth The depth of each subtree\\n  constructor(uint256 _subDepth) AccQueueQuinary(_subDepth) {}\\n\\n  /// @notice Returns the zero leaf at a specified level\\n  /// @param _level The level at which to return the zero leaf\\n  /// @return zero The zero leaf at the specified level\\n  function getZero(uint256 _level) internal view override returns (uint256 zero) {\\n    zero = zeros[_level];\\n  }\\n}\\n\",\"keccak256\":\"0xf749e787d5264975f87d6272118ab104390b9460de402da767e2e0594d1cd607\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/EmptyBallotRoots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract EmptyBallotRoots {\\n  // emptyBallotRoots contains the roots of Ballot trees of five leaf\\n  // configurations.\\n  // Each tree has a depth of 10, which is the hardcoded state tree depth.\\n  // Each leaf is an empty ballot. A configuration refers to the depth of the\\n  // voice option tree for that ballot.\\n\\n  // The leaf for the root at index 0 contains hash(0, root of a VO tree with\\n  // depth 1 and zero-value 0)\\n\\n  // The leaf for the root at index 1 contains hash(0, root of a VO tree with\\n  // depth 2 and zero-value 0)\\n\\n  // ... and so on.\\n\\n  // The first parameter to the hash function is the nonce, which is 0.\\n\\n  uint256[5] internal emptyBallotRoots;\\n\\n  constructor() {\\n    emptyBallotRoots[0] = uint256(4904028317433377177773123885584230878115556059208431880161186712332781831975);\\n    emptyBallotRoots[1] = uint256(344732312350052944041104345325295111408747975338908491763817872057138864163);\\n    emptyBallotRoots[2] = uint256(19445814455012978799483892811950396383084183210860279923207176682490489907069);\\n    emptyBallotRoots[3] = uint256(10621810780690303482827422143389858049829670222244900617652404672125492013328);\\n    emptyBallotRoots[4] = uint256(17077690379337026179438044602068085690662043464643511544329656140997390498741);\\n  }\\n}\\n\",\"keccak256\":\"0xef96144b02bc3e924d45d0e9ec40bea53944c41b41009cb87d94537556ef05bb\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/zeros/MerkleQuinaryMaci.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract MerkleZeros {\\n  uint256[33] internal zeros;\\n\\n  // Quinary tree zeros (Keccak hash of 'Maci')\\n  constructor() {\\n    zeros[0] = uint256(8370432830353022751713833565135785980866757267633941821328460903436894336785);\\n    zeros[1] = uint256(12915444503621073454579416579430905206970714557680052030066757042249102605307);\\n    zeros[2] = uint256(15825388848727206932541662858173052318786639683743459477657913288690190505308);\\n    zeros[3] = uint256(20672917177817295069558894035958266756825295443848082659014905185716743537191);\\n    zeros[4] = uint256(448586013948167251740855715259393055429962470693972912240018559200278204556);\\n    zeros[5] = uint256(3228865992178886480410396198366133115832717015233640381802715479176981303177);\\n    zeros[6] = uint256(19116532419590876304532847271428641103751206695152259493043279205958851263600);\\n    zeros[7] = uint256(13531983203936271379763604150672239370281863210813769735936250692178889682484);\\n    zeros[8] = uint256(8276490051100115441938424474671329955897359239518198952109759468777824929104);\\n    zeros[9] = uint256(1234816188709792521426066175633785051600533236493067959807265450339481920006);\\n    zeros[10] = uint256(14253963034950198848796956783804665963745244419038717333683296599064556174281);\\n    zeros[11] = uint256(6367560368479067766970398112009211893636892126125767203198799843543931913172);\\n    zeros[12] = uint256(9086778412328290069463938062555298073857321633960448227011862356090607842391);\\n    zeros[13] = uint256(1440983698234119608650157588008070947531139377294971527360643096251396484622);\\n    zeros[14] = uint256(3957599085599383799297196095384587366602816424699353871878382158004571037876);\\n    zeros[15] = uint256(2874250189355749385170216620368454832544508482778847425177457138604069991955);\\n    zeros[16] = uint256(21009179226085449764156117702096359546848859855915028677582017987249294772778);\\n    zeros[17] = uint256(11639371146919469643603772238908032714588430905217730187804009793768292270213);\\n    zeros[18] = uint256(6279313411277883478350325643881386249374023631847602720184182017599127173896);\\n    zeros[19] = uint256(21059196126634383551994255775761712285020874549906884292741523421591865338509);\\n    zeros[20] = uint256(9444544622817172574621750245792527383369133221167610044960147559319164808325);\\n    zeros[21] = uint256(5374570219497355452080912323548395721574511162814862844226178635172695078543);\\n    zeros[22] = uint256(4155904241440251764630449308160227499466701168124519106689866311729092343061);\\n    zeros[23] = uint256(15881609944326576145786405158479503217901875433072026818450276983706463215155);\\n    zeros[24] = uint256(20831546672064137588434602157208687297579005252478070660473540633558666587287);\\n    zeros[25] = uint256(3209071488384365842993449718919243416332014108747571544339190291353564426179);\\n    zeros[26] = uint256(10030934989297780221224272248227257782450689603145083016739151821673604746295);\\n    zeros[27] = uint256(16504852316033851373501270056537918974469380446508638487151124538300880427080);\\n    zeros[28] = uint256(5226137093551352657015038416264755428944140743893702595442932837011856178457);\\n    zeros[29] = uint256(18779994066356991319291039019820482828679702085087990978933303018673869446075);\\n    zeros[30] = uint256(12037506572124351893114409509086276299115869080424687624451184925646292710978);\\n    zeros[31] = uint256(12049750997011422639258622747494178076018128204515149991024639355149614767606);\\n    zeros[32] = uint256(3171463916443906096008599541392648187002297410622977814790586531203175805057);\\n  }\\n}\\n\",\"keccak256\":\"0x8697bf45f4805e6bdf84f2c0c95b5a1946f79a7c9806ee711dce785650124807\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x2d6a390a36a2e95985959cd1ef5b896c6dfedad01c09154674b2ff48e54785bb\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n    TopupCredit topupCredit;\\n  }\\n}\\n\",\"keccak256\":\"0x10c725c49e9193b7641574733666e231886e2ccc301c755e1dd9567aff7c5c9c\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @param msgType the type of the message\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad,\\n    uint256 msgType\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ msgType: msgType, data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0x6dabe0385409cf4dc4a22b80b7483c26d016c4173e5f62930e06085f02d91c09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052614d96806100136000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c8063683f3dc3146200003f578063b43c4969146200005f575b600080fd5b62000048600a81565b60405160ff90911681526020015b60405180910390f35b6200007662000070366004620002f6565b6200008f565b6040516001600160a01b03909116815260200162000056565b60006604000000000000876020013510620000bd576040516302c3596560e51b815260040160405180910390fd5b6000620000d16040880160208901620003b2565b604051620000df90620002a8565b60ff9091168152602001604051809103906000f08015801562000106573d6000803e3d6000fd5b50905060006040518060600160405280876001600160a01b03168152602001836001600160a01b03168152602001866001600160a01b0316815250905060008a8a8a8a856040516200015890620002b6565b62000168959493929190620003d7565b604051809103906000f08015801562000185573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0380831660048301529192509084169063f2fde38b90602401600060405180830381600087803b158015620001ce57600080fd5b505af1158015620001e3573d6000803e3d6000fd5b50505050806001600160a01b031663e1c7392a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200022357600080fd5b505af115801562000238573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0388811660048301528416925063f2fde38b9150602401600060405180830381600087803b1580156200028057600080fd5b505af115801562000295573d6000803e3d6000fd5b50929d9c50505050505050505050505050565b61231e806200049783390190565b6125ac80620027b583390190565b600060408284031215620002d757600080fd5b50919050565b6001600160a01b0381168114620002f357600080fd5b50565b60008060008060008060008789036101808112156200031457600080fd5b88359750620003278a60208b01620002c4565b96506080605f19820112156200033c57600080fd5b50606088019450620003528960e08a01620002c4565b93506101208801356200036581620002dd565b92506101408801356200037881620002dd565b91506101608801356200038b81620002dd565b8091505092959891949750929550565b803560ff81168114620003ad57600080fd5b919050565b600060208284031215620003c557600080fd5b620003d0826200039b565b9392505050565b8581526101808101620003f7602083018780358252602090810135910152565b60ff62000404866200039b565b16606083015260ff6200041a602087016200039b565b16608083015260ff62000430604087016200039b565b1660a083015260ff62000446606087016200039b565b1660c0830152833560e0830152602084013561010083015282516001600160a01b03908116610120840152602084015181166101408401526040909301519092166101609091015294935050505056fe60e06040523480156200001157600080fd5b506040516200231e3803806200231e833981016040819052620000349162000617565b808060056200004333620005c7565b81600003620000655760405163682e504160e11b815260040160405180910390fd5b60208211156200009657604051637ccdcc9760e11b8152600481018390526020602482015260440160405180910390fd5b80600214158015620000a9575080600514155b15620000c857604051636f7b6c0360e01b815260040160405180910390fd5b6000805460ff60a01b191660028314600160a01b02179055608082905260a0819052620000f6828262000746565b60c05250507f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f7116101725550507f1c8de1edeabc24fc4c1595acaabb70be9b70f351d58c6fa338e1e9a994413bfb610173557f22fcda488c14b34fc60eb073fbe92fe10793e2ab14682e0f057332ddbef3d55c610174557f2db474db7c7212646cb15c6177d87be30711e6c04f1139d8e495ef1d1d998227610175557efde404053ec39a19f6ac347121a2264815dda84f910a388cb372e967a5d08c610176557f0723792ffab6ec6cfb3ece1509b9b4fb07e5bdb2299d1538e6e1db916f90cf89610177557f2a4392ec4e3d1811cd6a950cc865ee6f2342910a6551c5dce38cb995576c7c70610178557f1dead4c14f75e9d8449c80b648dcd4694c2ee50da2ba16e5e438f0d77ab02e34610179557f124c53ce0953fffb7ab5e3c143df6cd48ba747d3959fcb8086405d763ed5455061017a557f02bae19605746a8cd3f0927b2c01630f36f4d1bab9216ca839833e7ff6efa20661017b557f1f8375099becf17173d457d0d07bfb74c7067df1143b5ad987046e8e66817bc961017c557f0e13e954d61bb3fa3b03e7d136ca909b610fa2ca4443d920d94d16684f2b83d461017d557f1416ef2fc4f88fcfc4f9eb12f8e214b1c3e31c6c10ece9cfa51f078a3bbf345761017e557f032f915ff71e198a7955d2697249f40fb94c65812ed24e670c9700f52fdf6e0e61017f557f08bfebf4b3ddb0f8c51dd40193f5996da9f3d799ee0d8beb6be4038132df60b4610180557f065ac498cf4a5acaeb3b6cee826da9f834c961fa39feff6ae925b90dff79b613610181557f2e72c628101a93201b912a3e3fe96d39b0a9076ec39b7935a015c59bb32b8a2a610182557f19bba68e7b9da1e6ec42e52d7ab2adaf3b6a5521b1a454ec70f62e0ab702c085610183557f0de1f72745a5af2a34cac412e00eb6c8b5db1f3b52fa1bff88076c2726b83b08610184557f2e8f152603b2fac10d6a14c841327c23c502537367ccb1e42fab9a3bd9db2a8d610185557f14e16c3e0dcfd7e621a32627ebf37f6c0afb4467d34c7b7aeffded11769dec85610186557f0be1e62127948b4805c85a1d836574f0892ca6473fcde98f3fd1781248a9768f610187557f0930288fbd7c849197c8372f1dd8f9087f8a03f09b9cd904a469c15ef6b1b515610188557f231cac34e215e3f404d2fcfb79e0705deeb3d40978f0ee31072f6cbc1b579e33610189557f2e0e3cd2718ac7199b81dc14e841de40a9536b7ffe95fa1fc9c6b799e43e2c9761018a557f0718452506f0a232e98966d84b1a4675a66bd80263a2dc58bdac873825752fc361018b557f162d4ed998307d6e132edbf5c11f62f53d4636aa10cb3c2244c2bf5577168c3761018c557f247d6a5544a8f295a894ae77c7efcdcbf52e3bf4e5d0c0d2f40557a61d44984861018d557f0b8de3868471f109e91670daca698dba917d1c5535821f33aa9598d1db8e3d1961018e557f29851997020f527c92e20f030d232b81d334144a641e6a8866b46dd925005bbb61018f557f1a9cfcbe29a2b6503a03049727c0bca3111afd62f2836f392080321d1b4ef642610190557f1aa3ead91fa89cc1d6cb1d0eb76a27190c6abfdd3265d6d0a1e5c58feddaddf6610191557f0702fc26a7d367e6677efefd95204a7e00144c2fc7dbc2a581aa00d99f51f081610192556200075b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200062a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620006885781600019048211156200066c576200066c62000631565b808516156200067a57918102915b93841c93908002906200064c565b509250929050565b600082620006a15750600162000740565b81620006b05750600062000740565b8160018114620006c95760028114620006d457620006f4565b600191505062000740565b60ff841115620006e857620006e862000631565b50506001821b62000740565b5060208310610133831016604e8410600b841016171562000719575081810a62000740565b62000725838362000647565b80600019048211156200073c576200073c62000631565b0290505b92915050565b600062000754838362000690565b9392505050565b60805160a05160c051611b1562000809600039600081816103ea01528181610a2501528181610ac201528181610c7f0152610d820152600081816103230152818161056e015281816106e401528181610bb401528181610f2b0152818161109f015261130001526000818161041a0152818161047b0152818161054401528181610bed01528181610cb801528181610d0201528181610ecc01528181610f82015261123b0152611b156000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806381d6a24a116100c3578063c00bdbcc1161007c578063c00bdbcc146102b8578063c15da65b146102cb578063d9c55ce1146102de578063dda89a6e146102e6578063e93fb4d4146102f0578063f2fde38b1461030357600080fd5b806381d6a24a146102455780638da5cb5b146102615780639cfced971461027c578063a27154ba1461028f578063b6a64acd14610297578063bea140b3146102a557600080fd5b806358bfc3791161011557806358bfc379146101cc5780635bb93995146101df5780635bf1fa4d146101f257806362a361bb1461020557806369e7c58614610218578063715018a61461023b57600080fd5b80631b9b8aa71461015d5780631ffc735d1461018357806324a47aeb146101965780633bfa6fce146101a95780633dfb88b2146101b15780633e1a8cc1146101c4575b600080fd5b61017061016b366004611522565b610316565b6040519081526020015b60405180910390f35b610170610191366004611522565b610399565b6101706101a4366004611522565b6104c7565b6101706106d8565b6101706101bf366004611582565b610723565b6101706107a4565b6101706101da366004611600565b6107d3565b6101706101ed3660046116a6565b61086d565b6101706102003660046116a6565b610892565b6101706102133660046116c8565b610931565b61016e5461022b90610100900460ff1681565b604051901515815260200161017a565b61024361096b565b005b610170546001546040805192835260208301919091520161017a565b6000546040516001600160a01b03909116815260200161017a565b61017061028a366004611723565b61097f565b610170602081565b61016e5461022b9060ff1681565b6101706102b336600461177c565b6109b9565b6102436102c6366004611522565b6109f3565b6102436102d9366004611522565b610a6f565b610243610c75565b6101706101715481565b6101706102fe366004611522565b610dbf565b6102436103113660046117d5565b610dfa565b61017154600090610347837f00000000000000000000000000000000000000000000000000000000000000006118ff565b101561037d5761017154604051627289df60e61b8152610374918491600401918252602082015260400190565b60405180910390fd5b61014d82602181106103915761039161190b565b015492915050565b60006103a3610e70565b50610171546103b3826000610eca565b6103be816001611921565b610171556103cf61014d6000611487565b600061016f5561016e805460ff191690556101715461040f907f000000000000000000000000000000000000000000000000000000000000000090611934565b6000036104c25760027f0000000000000000000000000000000000000000000000000000000000000000602181106104495761044961190b565b600402015460018054600090815261014c602052604081209290925580549161047183611956565b90915550600290507f0000000000000000000000000000000000000000000000000000000000000000602181106104aa576104aa61190b565b6004020160008091018190556104c290608690611487565b919050565b60006104d1610e70565b816000036104f257604051630543d40760e11b815260040160405180910390fd5b61016e5460ff1661051657604051631e596e4360e11b815260040160405180910390fd5b602082111561054257604051632cd31ae960e01b81526004810183905260206024820152604401610374565b7f00000000000000000000000000000000000000000000000000000000000000005b61017154610592827f00000000000000000000000000000000000000000000000000000000000000006118ff565b10156105aa57806105a281611956565b915050610564565b808310156105d457604051627289df60e61b81526004810184905260248101829052604401610374565b8083036106105761016f5461014d84602181106105f3576105f361190b565b0155505061016e805461ff00191661010017905561016f54919050565b61016f549150805b838110156106aa57600061062b8261100b565b600054909150600160a01b900460ff161561066357610648611496565b8481526020810182905261065b81610931565b945050610697565b61066b6114b4565b848152602081018290526040810182905260608101829052608081018290526106938161097f565b9450505b50806106a281611956565b915050610618565b508161014d84602181106106c0576106c061190b565b015561016e805461ff00191661010017905550919050565b60015b600154610708827f00000000000000000000000000000000000000000000000000000000000000006118ff565b1015610720578061071881611956565b9150506106db565b90565b60405163248f667760e01b8152600090739dE016B7bbbE32cb5E18163530b87F810e76483C9063248f66779061075d90859060040161196f565b602060405180830381865af415801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e91906119a0565b92915050565b61016e5460009060ff166107cb57604051631e596e4360e11b815260040160405180910390fd5b5061016f5490565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160028360405160200161080991906119b9565b60408051601f1981840301815290829052610823916119ef565b602060405180830381855afa158015610840573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061086391906119a0565b61079e9190611934565b6000610877611496565b8381526020810183905261088a81610931565b949350505050565b600061089c6114b4565b600284602181106108af576108af61190b565b60040201548152600284602181106108c9576108c961190b565b60040201600101548160016020020152600284602181106108ec576108ec61190b565b600402016002015481600260200201526002846021811061090f5761090f61190b565b6004020160030154816003602002015282816004602002015261088a8161097f565b6040516314d2f97b60e11b815260009073f2e06d2452A0d124AF0F6b8e63662131729E7F0A906329a5f2f69061075d908590600401611a1e565b610973610e70565b61097d6000611021565b565b604051630926f44b60e31b81526000907308979464144853c9a97a98a624597C4698acda8e90634937a2589061075d908590600401611a46565b6040516304b98e1d60e31b8152600090736397684f16b6bCe2f47D9C5d51DbE45c8d570937906325cc70e89061075d908590600401611a6e565b6109fb610e70565b60018054600090815261014c6020526040812083905581549190610a1e83611956565b91905055507f00000000000000000000000000000000000000000000000000000000000000006101716000828254610a569190611921565b9091555050600061016f555061016e805460ff19169055565b610a77610e70565b61016e5460ff1615610a9c57604051630d36aec160e01b815260040160405180910390fd5b61017154600003610ac0576040516316a0341160e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061017154610aef9190611934565b15610afc57610afc610c75565b600154600103610b2557610b106000610dbf565b61016f5561016e805460ff1916600117905550565b6000610b2f6106d8565b610170549091506000905b600154811015610bab578315801590610b5257508382145b15610b5d5750505050565b610b74610b6c61017054610dbf565b600085611071565b6101708054906000610b8583611956565b91905055508180610b9590611956565b9250508080610ba390611956565b915050610b3a565b506000610bd8837f00000000000000000000000000000000000000000000000000000000000000006118ff565b90506001546101705403610c41576000610c117f000000000000000000000000000000000000000000000000000000000000000061100b565b6001549091505b82811015610c3e57610c2c82600087611071565b80610c3681611956565b915050610c18565b50505b60a78360218110610c5457610c5461190b565b600402016000015461016f55505061016e805460ff19166001179055505b50565b610c7d610e70565b7f000000000000000000000000000000000000000000000000000000000000000061017154610cac9190611934565b600003610cf457610cdc7f000000000000000000000000000000000000000000000000000000000000000061100b565b600154600090815261014c6020526040902055610d65565b610cfe6000611239565b60027f000000000000000000000000000000000000000000000000000000000000000060218110610d3157610d3161190b565b6004020154600154600090815261014c6020526040812091909155610d58906002906114d2565b610d6561014d6000611487565b60006001546001610d769190611921565b60018190559050610da77f000000000000000000000000000000000000000000000000000000000000000082611a96565b6101715550600061016f5561016e805460ff19169055565b60008160015411610de65760405163042a2e7160e11b815260048101839052602401610374565b50600090815261014c602052604090205490565b610e02610e70565b6001600160a01b038116610e675760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610374565b610c7281611021565b6000546001600160a01b0316331461097d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610374565b7f0000000000000000000000000000000000000000000000000000000000000000811115610f0b5760405163d1459f7960e01b815260040160405180910390fd5b600060868260218110610f2057610f2061190b565b01549050610f4f60017f0000000000000000000000000000000000000000000000000000000000000000611aad565b8114610fd4578260028360218110610f6957610f6961190b565b600402018260048110610f7e57610f7e61190b565b01557f00000000000000000000000000000000000000000000000000000000000000008214610fcf5760868260218110610fba57610fba61190b565b018054906000610fc983611956565b91905055505b505050565b610fde82846113a5565b925060868260218110610ff357610ff361190b565b60009101558161100281611956565b92505050610f0b565b600061017282602181106103915761039161190b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8082111561107e57505050565b600061012b83602181106110945761109461190b565b015490506110c360017f0000000000000000000000000000000000000000000000000000000000000000611aad565b8114611121578360a784602181106110dd576110dd61190b565b6004020182600481106110f2576110f261190b565b015561012b83602181106111085761110861190b565b01805490600061111783611956565b9190505550611233565b60008054600160a01b900460ff161561116e5761113c611496565b60a7856021811061114f5761114f61190b565b600402015481526020810186905261116681610931565b915050611203565b6111766114b4565b60005b838160ff1610156111dd5760a786602181106111975761119761190b565b600402018160ff16600481106111af576111af61190b565b0154828260ff16600581106111c6576111c661190b565b6020020152806111d581611ac0565b915050611179565b50858184600581106111f1576111f161190b565b60200201526111ff8161097f565b9150505b61012b84602181106112175761121761190b565b60009101556112318161122b866001611921565b85611071565b505b50505050565b7f0000000000000000000000000000000000000000000000000000000000000000811015610c72576000608682602181106112765761127661190b565b01549050801561137a57600061128a6114b4565b60006112958561100b565b905060005b848160ff1610156112fe57600286602181106112b8576112b861190b565b600402018160ff16600481106112d0576112d061190b565b0154838260ff16600581106112e7576112e761190b565b6020020152806112f681611ac0565b91505061129a565b7f00000000000000000000000000000000000000000000000000000000000000008160ff1610156113565781838260ff166005811061133f5761133f61190b565b60200201528061134e81611ac0565b9150506112fe565b61135f8361097f565b935061137584611370886001611921565b610eca565b505050505b6086826021811061138d5761138d61190b565b60009101558161139c81611956565b92505050611239565b60006113af6114b4565b600284602181106113c2576113c261190b565b60040201548152600284602181106113dc576113dc61190b565b60040201600101548160016020020152600284602181106113ff576113ff61190b565b60040201600201548160026020020152600284602181106114225761142261190b565b600402016003015481600360200201528281600460200201526114448161097f565b9150600284602181106114595761145961190b565b60040201600061148091905060008155600101600081556001016000815560010160009055565b5092915050565b50610c729060218101906114e1565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b50610c729060848101906114fa565b5b808211156114f657600081556001016114e2565b5090565b808211156114f6576000808255600182018190556002820181905560038201556004016114fa565b60006020828403121561153457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561157a5761157a61153b565b604052919050565b60006080828403121561159457600080fd5b82601f8301126115a357600080fd5b6040516080810181811067ffffffffffffffff821117156115c6576115c661153b565b6040528060808401858111156115db57600080fd5b845b818110156115f55780358352602092830192016115dd565b509195945050505050565b6000602080838503121561161357600080fd5b823567ffffffffffffffff8082111561162b57600080fd5b818501915085601f83011261163f57600080fd5b8135818111156116515761165161153b565b8060051b9150611662848301611551565b818152918301840191848101908884111561167c57600080fd5b938501935b8385101561169a57843582529385019390850190611681565b98975050505050505050565b600080604083850312156116b957600080fd5b50508035926020909101359150565b6000604082840312156116da57600080fd5b82601f8301126116e957600080fd5b6040516040810181811067ffffffffffffffff8211171561170c5761170c61153b565b80604052508060408401858111156115db57600080fd5b600060a0828403121561173557600080fd5b82601f83011261174457600080fd5b60405160a0810181811067ffffffffffffffff821117156117675761176761153b565b6040528060a08401858111156115db57600080fd5b60006060828403121561178e57600080fd5b82601f83011261179d57600080fd5b6040516060810181811067ffffffffffffffff821117156117c0576117c061153b565b6040528060608401858111156115db57600080fd5b6000602082840312156117e757600080fd5b81356001600160a01b03811681146117fe57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561185657816000190482111561183c5761183c611805565b8085161561184957918102915b93841c9390800290611820565b509250929050565b60008261186d5750600161079e565b8161187a5750600061079e565b8160018114611890576002811461189a576118b6565b600191505061079e565b60ff8411156118ab576118ab611805565b50506001821b61079e565b5060208310610133831016604e8410600b84101617156118d9575081810a61079e565b6118e3838361181b565b80600019048211156118f7576118f7611805565b029392505050565b60006117fe838361185e565b634e487b7160e01b600052603260045260246000fd5b8082018082111561079e5761079e611805565b60008261195157634e487b7160e01b600052601260045260246000fd5b500690565b60006001820161196857611968611805565b5060010190565b60808101818360005b6004811015611997578151835260209283019290910190600101611978565b50505092915050565b6000602082840312156119b257600080fd5b5051919050565b815160009082906020808601845b838110156119e3578151855293820193908201906001016119c7565b50929695505050505050565b6000825160005b81811015611a1057602081860181015185830152016119f6565b506000920191825250919050565b60408101818360005b6002811015611997578151835260209283019290910190600101611a27565b60a08101818360005b6005811015611997578151835260209283019290910190600101611a4f565b60608101818360005b6003811015611997578151835260209283019290910190600101611a77565b808202811582820484141761079e5761079e611805565b8181038181111561079e5761079e611805565b600060ff821660ff8103611ad657611ad6611805565b6001019291505056fea2646970667358221220c029a4f718a97de8e420cb66eeb63348c182e9fec48fac0dde33ddb1b04025ba64736f6c6343000813003360e0604052604051620025ac380380620025ac83398101604081905262000026916200044f565b62000031336200023c565b7f0ad794e7fb50257e0edc93fe4616c69ea691e7a6c653333b6a5b507d798947276001557ec31c90221285dc87ee66daadc19f64f922e45a613f4f5429d74ddc7d66e0236002557f2afdf0e1d10d07d0df3a8481202bf2595108195e34d4ccb88742641c576aa77d6003557f177bbb5acaafc1f1deb73b8ae33f97132089ab84039048a096e202b1f8c429106004557f25c1a155f21ae70ca3b8bdb27961efdee58bdafff83274c18dd37d0f0a8bfbb560055581517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000011115806200013957507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001826020015110155b1562000158576040516354be831760e11b815260040160405180910390fd5b81516007819055602083015160088190556200017591906200028c565b6080528051601180546001600160a01b039283166001600160a01b03199182161790915560208084015160128054918516918416919091179055604093840151601380549190941692169190911790915560c0959095528351600e5592840151600f5550805160108054948301519383015160609093015160ff90811663010000000263ff0000001994821662010000029490941663ffff0000199582166101000261ffff1990971691909316179490941792909216919091171790554260a052620005b1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002986200033b565b83815260208101839052620002ad81620002b5565b949350505050565b6040516314d2f97b60e11b815260009073f2e06d2452A0d124AF0F6b8e63662131729E7F0A906329a5f2f690620002f190859060040162000564565b602060405180830381865af41580156200030f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000335919062000597565b92915050565b60405180604001604052806002906020820280368337509192915050565b604051608081016001600160401b03811182821017156200038a57634e487b7160e01b600052604160045260246000fd5b60405290565b604051606081016001600160401b03811182821017156200038a57634e487b7160e01b600052604160045260246000fd5b600060408284031215620003d457600080fd5b604080519081016001600160401b03811182821017156200040557634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b805160ff811681146200043157600080fd5b919050565b6001600160a01b03811681146200044c57600080fd5b50565b60008060008060008587036101808112156200046a57600080fd5b865195506200047d8860208901620003c1565b94506080605f19820112156200049257600080fd5b6200049c62000359565b620004aa606089016200041f565b8152620004ba608089016200041f565b6020820152620004cd60a089016200041f565b6040820152620004e060c089016200041f565b60608201529350620004f68860e08901620003c1565b9250606061011f19820112156200050c57600080fd5b506200051762000390565b610120870151620005288162000436565b81526101408701516200053b8162000436565b6020820152610160870151620005518162000436565b6040820152949793965091945092919050565b60408101818360005b60028110156200058e5781518352602092830192909101906001016200056d565b50505092915050565b600060208284031215620005aa57600080fd5b5051919050565b60805160a05160c051611f7762000635600039600081816102e70152818161056301528181610812015281816109ff01528181610e3101528181610f6e01526110ad0152600081816102c60152818161053a015281816107e9015281816109d601528181610e0801528181610f450152611084015260006103b80152611f776000f3fe608060405234801561001057600080fd5b50600436106101fa5760003560e01c8063715018a61161011a578063ac98e5df116100ad578063bea140b31161007c578063bea140b3146104eb578063c17268d9146104fe578063e1c7392a14610507578063f2fde38b1461050f578063fba630f21461052257600080fd5b8063ac98e5df1461041b578063ae93a21214610471578063b5f38c8114610484578063bc14ee2b146104a157600080fd5b80638aa0ba92116100e95780638aa0ba92146103b35780638da5cb5b146103da5780639c971729146103f55780639cfced971461040857600080fd5b8063715018a6146103725780637296aaea1461037a5780637d0a81c81461038d57806386f3c3f7146103a057600080fd5b80633dfb88b2116101925780635bb93995116101615780635bb93995146103295780635d5909dd1461033c57806362a361bb14610345578063683f3dc31461035857600080fd5b80633dfb88b2146102b15780634909229f146102c45780634f367f0f1461030b57806358bfc3791461031657600080fd5b8063167fd483116101ce578063167fd4831461026a578063184ff47f1461027d57806331e766a514610290578063394b78a21461029e57600080fd5b8062329f2f146101ff5780630396a0ce1461020957806306912d3c146102315780630f4cf69214610253575b600080fd5b61020761052b565b005b600e54600f54610217919082565b604080519283526020830191909152015b60405180910390f35b61024461023f36600461177c565b61065b565b604051610228939291906117d4565b61025c600c5481565b604051908152602001610228565b61025c6102783660046118c5565b610709565b61020761028b3660046118fc565b6107e2565b600754600854610217919082565b6102076102ac36600461191e565b6109cf565b61025c6102bf366004611961565b610ba6565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610217565b600d54600c54610217565b61025c6103243660046119df565b610c27565b61025c6103373660046118fc565b610cc1565b61025c600d5481565b61025c610353366004611a85565b610ce6565b610360600a81565b60405160ff9091168152602001610228565b610207610d20565b610207610388366004611aa1565b610d34565b61025c61039b366004611b6a565b610db9565b6102076103ae3660046118fc565b610df9565b61025c7f000000000000000000000000000000000000000000000000000000000000000081565b6000546040516001600160a01b039091168152602001610228565b610207610403366004611bcc565b610f36565b61025c610416366004611be5565b61103b565b6010546104449060ff808216916101008104821691620100008204811691630100000090041684565b6040805160ff95861681529385166020850152918416918301919091529091166060820152608001610228565b61020761047f366004611bcc565b611075565b600a546104919060ff1681565b6040519015158152602001610228565b6011546012546013546104c1926001600160a01b03908116928116911683565b604080516001600160a01b0394851681529284166020840152921691810191909152606001610228565b61025c6104f9366004611c3e565b61137a565b61025c600b5481565b6102076113b4565b61020761051d366004611cac565b6114de565b61025c60095481565b61053361155c565b600061055f7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f000000000000000000000000000000000000000000000000000000000000000081116105a157604051630931513d60e11b815260040160405180910390fd5b6012546010546040516324a47aeb60e01b81526201000090910460ff1660048201526000916001600160a01b0316906324a47aeb906024016020604051808303816000875af11580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c9190611cf2565b90507fc5624680ab5d50c84507f9e0dc2032163de2bda906ab8a661a53dd4d43bd5dc78160405161064f91815260200190565b60405180910390a15050565b610663611606565b60408051808201909152600080825260208201526000610681611625565b85518152602080870151828201526040805180820182527f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d818401528151808301909252878252918101839052945092506106ff8484610709565b9150509250925092565b6000610713611644565b602084810180515183528051820151918301919091528051604090810151908301528051606090810151908301525160809081015190820152610754611644565b6020858101805160a0908101518452815160c0015184840152815160e001516040808601919091528251610100015160608601529151610120015160808501528151908101909152865181526107d99181016107af8561103b565b81526020016107bd8461103b565b815260200186600001518152602001866020015181525061103b565b95945050505050565b600061080e7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f000000000000000000000000000000000000000000000000000000000000000081106108505760405163148fb9a960e31b815260040160405180910390fd5b600e54600c541061087457604051631ec0b2f760e01b815260040160405180910390fd5b600c805460010190556013546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190611d21565b50604080518082019091528381526020810183905260008061091b83600261065b565b601254604051631ffc735d60e01b8152600481018390529395509093506001600160a01b031691631ffc735d91506024016020604051808303816000875af115801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f9190611cf2565b507f935afc7bb7cc33eb3e24e20dcfc75f5b21fa58e9c82cca06435238efaf9a3a58826040516109bf9190611d43565b60405180910390a1505050505050565b60006109fb7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f00000000000000000000000000000000000000000000000000000000000000008110610a3d5760405163148fb9a960e31b815260040160405180910390fd5b600e54600c5410610a6157604051631ec0b2f760e01b815260040160405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018235101580610ab557507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001826020013510155b15610ad3576040516354be831760e11b815260040160405180910390fd5b600c8054600190810190915583526000610af68461027836869003860186611d52565b601254604051631ffc735d60e01b8152600481018390529192506001600160a01b031690631ffc735d906024016020604051808303816000875af1158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b669190611cf2565b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b8484604051610b98929190611d6e565b60405180910390a150505050565b60405163248f667760e01b8152600090739dE016B7bbbE32cb5E18163530b87F810e76483C9063248f667790610be0908590600401611d97565b602060405180830381865af4158015610bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c219190611cf2565b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600283604051602001610c5d9190611dc8565b60408051601f1981840301815290829052610c7791611dfe565b602060405180830381855afa158015610c94573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610cb79190611cf2565b610c219190611e2d565b6000610ccb611662565b83815260208101839052610cde81610ce6565b949350505050565b6040516314d2f97b60e11b815260009073f2e06d2452A0d124AF0F6b8e63662131729E7F0A906329a5f2f690610be0908590600401611e4f565b610d2861155c565b610d3260006115b6565b565b828114610d545760405163ca3487f760e01b815260040160405180910390fd5b8260005b81811015610db157610da9868683818110610d7557610d75611d0b565b90506101600201803603810190610d8c9190611e77565b858584818110610d9e57610d9e611d0b565b9050604002016109cf565b600101610d58565b505050505050565b6000610dc3611680565b8251518152825160209081015181830152830151816002602002015260408301516060820152610df281610ba6565b9392505050565b610e0161155c565b6000610e2d7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f00000000000000000000000000000000000000000000000000000000000000008111610e6f57604051630931513d60e11b815260040160405180910390fd5b600a5460ff1615610e935760405163084ef7b960e41b815260040160405180910390fd5b60115460405163cfa1fa0360e01b815260048101859052602481018490526001600160a01b039091169063cfa1fa0390604401600060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505050507fbe5eae95ff0a9a2779506ae62da06dda1e349311d3f2b6ceb990ea42b6a5f20b83604051610f2991815260200190565b60405180910390a1505050565b610f3e61155c565b6000610f6a7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f00000000000000000000000000000000000000000000000000000000000000008111610fac57604051630931513d60e11b815260040160405180910390fd5b60125460405163c15da65b60e01b8152600481018490526001600160a01b039091169063c15da65b90602401600060405180830381600087803b158015610ff257600080fd5b505af1158015611006573d6000803e3d6000fd5b505050507f1245b881cb30fdad22b2f9fde2d5c2a3605bbdf272d5e8a2235d8c9e81aba2ce8260405161064f91815260200190565b604051630926f44b60e31b81526000907308979464144853c9a97a98a624597C4698acda8e90634937a25890610be0908590600401611e94565b61107d61155c565b60006110a97f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f000000000000000000000000000000000000000000000000000000000000000081116110eb57604051630931513d60e11b815260040160405180910390fd5b600a5460ff161561110f5760405163084ef7b960e41b815260040160405180910390fd5b600a805460ff1916600117905560115460408051630c0775ff60e31b815290516001600160a01b039092169163603baff8916004808201926020929091908290030181865afa158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a9190611ebc565b6001600160a01b031663b6a64acd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111eb9190611d21565b61120757604051624a03c360e31b815260040160405180910390fd5b60115460405163dd0982a360e01b8152600481018490526001600160a01b039091169063dd0982a3906024016020604051808303816000875af1158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190611cf2565b60095561128161169e565b60095481526010546001906112a19082906301000000900460ff16611ed9565b60ff16600581106112b4576112b4611d0b565b01546020820152600060408201526112cb8161137a565b600b556011546040805163122db15360e01b815290516001600160a01b039092169163122db153916004808201926020929091908290030181865afa158015611318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133c9190611cf2565b600d8190556009546040517fa80928657383ff9d374f1409cf51e7460a64472b6baeb5ded1199830c15bae0192610f29928252602082015260400190565b6040516304b98e1d60e31b8152600090736397684f16b6bCe2f47D9C5d51DbE45c8d570937906325cc70e890610be0908590600401611ef2565b60065460ff16156113d8576040516342a2e18d60e01b815260040160405180910390fd5b6006805460ff19166001908117909155600c805482019055604080518082019091527f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f711815260006020820181905290918190819061143790859061065b565b601254604051631ffc735d60e01b81526004810183905293965091945092506001600160a01b031690631ffc735d906024016020604051808303816000875af1158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190611cf2565b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b8383604051610b98929190611f1a565b6114e661155c565b6001600160a01b0381166115505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b611559816115b6565b50565b6000546001600160a01b03163314610d325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611547565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051806040016040528060008152602001611620611625565b905290565b604051806101400160405280600a906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156116f5576116f56116bc565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611724576117246116bc565b604052919050565b600082601f83011261173d57600080fd5b6117456116d2565b80604084018581111561175757600080fd5b845b81811015611771578035845260209384019301611759565b509095945050505050565b6000806060838503121561178f57600080fd5b611799848461172c565b946040939093013593505050565b8051825260208082015181840160005b600a811015610db1578251825291830191908301906001016117b7565b6101c081016117e382866117a7565b83516101608301526020909301516101808201526101a00152919050565b600061016080838503121561181557600080fd5b61181d6116d2565b915082358252602084603f85011261183457600080fd5b604051610140810181811067ffffffffffffffff82111715611858576118586116bc565b60405291840191808684111561186d57600080fd5b8286015b848110156118885780358252908301908301611871565b5050908301525092915050565b6000604082840312156118a757600080fd5b6118af6116d2565b9050813581526020820135602082015292915050565b6000806101a083850312156118d957600080fd5b6118e38484611801565b91506118f3846101608501611895565b90509250929050565b6000806040838503121561190f57600080fd5b50508035926020909101359150565b6000808284036101a081121561193357600080fd5b61193d8585611801565b9250604061015f198201121561195257600080fd5b50610160830190509250929050565b60006080828403121561197357600080fd5b82601f83011261198257600080fd5b6040516080810181811067ffffffffffffffff821117156119a5576119a56116bc565b6040528060808401858111156119ba57600080fd5b845b818110156119d45780358352602092830192016119bc565b509195945050505050565b600060208083850312156119f257600080fd5b823567ffffffffffffffff80821115611a0a57600080fd5b818501915085601f830112611a1e57600080fd5b813581811115611a3057611a306116bc565b8060051b9150611a418483016116fb565b8181529183018401918481019088841115611a5b57600080fd5b938501935b83851015611a7957843582529385019390850190611a60565b98975050505050505050565b600060408284031215611a9757600080fd5b610df2838361172c565b60008060008060408587031215611ab757600080fd5b843567ffffffffffffffff80821115611acf57600080fd5b818701915087601f830112611ae357600080fd5b813581811115611af257600080fd5b88602061016083028501011115611b0857600080fd5b602092830196509450908601359080821115611b2357600080fd5b818701915087601f830112611b3757600080fd5b813581811115611b4657600080fd5b8860208260061b8501011115611b5b57600080fd5b95989497505060200194505050565b600060808284031215611b7c57600080fd5b6040516060810181811067ffffffffffffffff82111715611b9f57611b9f6116bc565b604052611bac8484611895565b815260408301356020820152606083013560408201528091505092915050565b600060208284031215611bde57600080fd5b5035919050565b600060a08284031215611bf757600080fd5b82601f830112611c0657600080fd5b60405160a0810181811067ffffffffffffffff82111715611c2957611c296116bc565b6040528060a08401858111156119ba57600080fd5b600060608284031215611c5057600080fd5b82601f830112611c5f57600080fd5b6040516060810181811067ffffffffffffffff82111715611c8257611c826116bc565b6040528060608401858111156119ba57600080fd5b6001600160a01b038116811461155957600080fd5b600060208284031215611cbe57600080fd5b8135610df281611c97565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c2157610c21611cc9565b600060208284031215611d0457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611d3357600080fd5b81518015158114610df257600080fd5b6101608101610c2182846117a7565b600060408284031215611d6457600080fd5b610df28383611895565b6101a08101611d7d82856117a7565b823561016083015260208301356101808301529392505050565b60808101818360005b6004811015611dbf578151835260209283019290910190600101611da0565b50505092915050565b815160009082906020808601845b83811015611df257815185529382019390820190600101611dd6565b50929695505050505050565b6000825160005b81811015611e1f5760208186018101518583015201611e05565b506000920191825250919050565b600082611e4a57634e487b7160e01b600052601260045260246000fd5b500690565b60408101818360005b6002811015611dbf578151835260209283019290910190600101611e58565b60006101608284031215611e8a57600080fd5b610df28383611801565b60a08101818360005b6005811015611dbf578151835260209283019290910190600101611e9d565b600060208284031215611ece57600080fd5b8151610df281611c97565b60ff8281168282160390811115610c2157610c21611cc9565b60608101818360005b6003811015611dbf578151835260209283019290910190600101611efb565b6101a08101611f2982856117a7565b82516101608301526020830151610180830152610df256fea26469706673582212204172a8d3e191cc04ccb8487326d5d5ae88b2ad179ba1309bc37535f39e74d70464736f6c63430008130033a2646970667358221220a414e18bfd9200065cdf43ca3bbb3a9380145dccf618ea8178c37e7fcd462f3a64736f6c63430008130033",
  "deployedBytecode": "$e61c65d9562aef5fa6ab22c0f787cf1e30$__9063248f66779061075d90859060040161196f565b602060405180830381865af415801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e91906119a0565b92915050565b61016e5460009060ff166107cb57604051631e596e4360e11b815260040160405180910390fd5b5061016f5490565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160028360405160200161080991906119b9565b60408051601f1981840301815290829052610823916119ef565b602060405180830381855afa158015610840573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061086391906119a0565b61079e9190611934565b6000610877611496565b8381526020810183905261088a81610931565b949350505050565b600061089c6114b4565b600284602181106108af576108af61190b565b60040201548152600284602181106108c9576108c961190b565b60040201600101548160016020020152600284602181106108ec576108ec61190b565b600402016002015481600260200201526002846021811061090f5761090f61190b565b6004020160030154816003602002015282816004602002015261088a8161097f565b6040516314d2f97b60e11b815260009073__$1540826e134b1b69b7091c82576ee3aadd$__906329a5f2f69061075d908590600401611a1e565b610973610e70565b61097d6000611021565b565b604051630926f44b60e31b815260009073__$46fbdf6658faf65265971bdad66851b86c$__90634937a2589061075d908590600401611a46565b6040516304b98e1d60e31b815260009073__$fa059fb1da6d850ca47ea49359bfe89f78$$1540826e134b1b69b7091c82576ee3aadd$__906329a5f2f690620002f190859060040162000564565b602060405180830381865af41580156200030f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000335919062000597565b92915050565b60405180604001604052806002906020820280368337509192915050565b604051608081016001600160401b03811182821017156200038a57634e487b7160e01b600052604160045260246000fd5b60405290565b604051606081016001600160401b03811182821017156200038a57634e487b7160e01b600052604160045260246000fd5b600060408284031215620003d457600080fd5b604080519081016001600160401b03811182821017156200040557634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b805160ff811681146200043157600080fd5b919050565b6001600160a01b03811681146200044c57600080fd5b50565b60008060008060008587036101808112156200046a57600080fd5b865195506200047d8860208901620003c1565b94506080605f19820112156200049257600080fd5b6200049c62000359565b620004aa606089016200041f565b8152620004ba608089016200041f565b6020820152620004cd60a089016200041f565b6040820152620004e060c089016200041f565b60608201529350620004f68860e08901620003c1565b9250606061011f19820112156200050c57600080fd5b506200051762000390565b610120870151620005288162000436565b81526101408701516200053b8162000436565b6020820152610160870151620005518162000436565b6040820152949793965091945092919050565b60408101818360005b60028110156200058e5781518352602092830192909101906001016200056d565b50505092915050565b600060208284031215620005aa57600080fd5b5051919050565b60805160a05160c051611f7762000635600039600081816102e70152818161056301528181610812015281816109ff01528181610e3101528181610f6e01526110ad0152600081816102c60152818161053a015281816107e9015281816109d601528181610e0801528181610f450152611084015260006103b80152611f776000f3fe608060405234801561001057600080fd5b50600436106101fa5760003560e01c8063715018a61161011a578063ac98e5df116100ad578063bea140b31161007c578063bea140b3146104eb578063c17268d9146104fe578063e1c7392a14610507578063f2fde38b1461050f578063fba630f21461052257600080fd5b8063ac98e5df1461041b578063ae93a21214610471578063b5f38c8114610484578063bc14ee2b146104a157600080fd5b80638aa0ba92116100e95780638aa0ba92146103b35780638da5cb5b146103da5780639c971729146103f55780639cfced971461040857600080fd5b8063715018a6146103725780637296aaea1461037a5780637d0a81c81461038d57806386f3c3f7146103a057600080fd5b80633dfb88b2116101925780635bb93995116101615780635bb93995146103295780635d5909dd1461033c57806362a361bb14610345578063683f3dc31461035857600080fd5b80633dfb88b2146102b15780634909229f146102c45780634f367f0f1461030b57806358bfc3791461031657600080fd5b8063167fd483116101ce578063167fd4831461026a578063184ff47f1461027d57806331e766a514610290578063394b78a21461029e57600080fd5b8062329f2f146101ff5780630396a0ce1461020957806306912d3c146102315780630f4cf69214610253575b600080fd5b61020761052b565b005b600e54600f54610217919082565b604080519283526020830191909152015b60405180910390f35b61024461023f36600461177c565b61065b565b604051610228939291906117d4565b61025c600c5481565b604051908152602001610228565b61025c6102783660046118c5565b610709565b61020761028b3660046118fc565b6107e2565b600754600854610217919082565b6102076102ac36600461191e565b6109cf565b61025c6102bf366004611961565b610ba6565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610217565b600d54600c54610217565b61025c6103243660046119df565b610c27565b61025c6103373660046118fc565b610cc1565b61025c600d5481565b61025c610353366004611a85565b610ce6565b610360600a81565b60405160ff9091168152602001610228565b610207610d20565b610207610388366004611aa1565b610d34565b61025c61039b366004611b6a565b610db9565b6102076103ae3660046118fc565b610df9565b61025c7f000000000000000000000000000000000000000000000000000000000000000081565b6000546040516001600160a01b039091168152602001610228565b610207610403366004611bcc565b610f36565b61025c610416366004611be5565b61103b565b6010546104449060ff808216916101008104821691620100008204811691630100000090041684565b6040805160ff95861681529385166020850152918416918301919091529091166060820152608001610228565b61020761047f366004611bcc565b611075565b600a546104919060ff1681565b6040519015158152602001610228565b6011546012546013546104c1926001600160a01b03908116928116911683565b604080516001600160a01b0394851681529284166020840152921691810191909152606001610228565b61025c6104f9366004611c3e565b61137a565b61025c600b5481565b6102076113b4565b61020761051d366004611cac565b6114de565b61025c60095481565b61053361155c565b600061055f7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f000000000000000000000000000000000000000000000000000000000000000081116105a157604051630931513d60e11b815260040160405180910390fd5b6012546010546040516324a47aeb60e01b81526201000090910460ff1660048201526000916001600160a01b0316906324a47aeb906024016020604051808303816000875af11580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c9190611cf2565b90507fc5624680ab5d50c84507f9e0dc2032163de2bda906ab8a661a53dd4d43bd5dc78160405161064f91815260200190565b60405180910390a15050565b610663611606565b60408051808201909152600080825260208201526000610681611625565b85518152602080870151828201526040805180820182527f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d818401528151808301909252878252918101839052945092506106ff8484610709565b9150509250925092565b6000610713611644565b602084810180515183528051820151918301919091528051604090810151908301528051606090810151908301525160809081015190820152610754611644565b6020858101805160a0908101518452815160c0015184840152815160e001516040808601919091528251610100015160608601529151610120015160808501528151908101909152865181526107d99181016107af8561103b565b81526020016107bd8461103b565b815260200186600001518152602001866020015181525061103b565b95945050505050565b600061080e7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f000000000000000000000000000000000000000000000000000000000000000081106108505760405163148fb9a960e31b815260040160405180910390fd5b600e54600c541061087457604051631ec0b2f760e01b815260040160405180910390fd5b600c805460010190556013546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190611d21565b50604080518082019091528381526020810183905260008061091b83600261065b565b601254604051631ffc735d60e01b8152600481018390529395509093506001600160a01b031691631ffc735d91506024016020604051808303816000875af115801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f9190611cf2565b507f935afc7bb7cc33eb3e24e20dcfc75f5b21fa58e9c82cca06435238efaf9a3a58826040516109bf9190611d43565b60405180910390a1505050505050565b60006109fb7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f00000000000000000000000000000000000000000000000000000000000000008110610a3d5760405163148fb9a960e31b815260040160405180910390fd5b600e54600c5410610a6157604051631ec0b2f760e01b815260040160405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018235101580610ab557507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001826020013510155b15610ad3576040516354be831760e11b815260040160405180910390fd5b600c8054600190810190915583526000610af68461027836869003860186611d52565b601254604051631ffc735d60e01b8152600481018390529192506001600160a01b031690631ffc735d906024016020604051808303816000875af1158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b669190611cf2565b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b8484604051610b98929190611d6e565b60405180910390a150505050565b60405163248f667760e01b815260009073__$e61c65d9562aef5fa6ab22c0f787cf1e30$__9063248f667790610be0908590600401611d97565b602060405180830381865af4158015610bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c219190611cf2565b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600283604051602001610c5d9190611dc8565b60408051601f1981840301815290829052610c7791611dfe565b602060405180830381855afa158015610c94573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610cb79190611cf2565b610c219190611e2d565b6000610ccb611662565b83815260208101839052610cde81610ce6565b949350505050565b6040516314d2f97b60e11b815260009073__$1540826e134b1b69b7091c82576ee3aadd$__906329a5f2f690610be0908590600401611e4f565b610d2861155c565b610d3260006115b6565b565b828114610d545760405163ca3487f760e01b815260040160405180910390fd5b8260005b81811015610db157610da9868683818110610d7557610d75611d0b565b90506101600201803603810190610d8c9190611e77565b858584818110610d9e57610d9e611d0b565b9050604002016109cf565b600101610d58565b505050505050565b6000610dc3611680565b8251518152825160209081015181830152830151816002602002015260408301516060820152610df281610ba6565b9392505050565b610e0161155c565b6000610e2d7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f00000000000000000000000000000000000000000000000000000000000000008111610e6f57604051630931513d60e11b815260040160405180910390fd5b600a5460ff1615610e935760405163084ef7b960e41b815260040160405180910390fd5b60115460405163cfa1fa0360e01b815260048101859052602481018490526001600160a01b039091169063cfa1fa0390604401600060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505050507fbe5eae95ff0a9a2779506ae62da06dda1e349311d3f2b6ceb990ea42b6a5f20b83604051610f2991815260200190565b60405180910390a1505050565b610f3e61155c565b6000610f6a7f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f00000000000000000000000000000000000000000000000000000000000000008111610fac57604051630931513d60e11b815260040160405180910390fd5b60125460405163c15da65b60e01b8152600481018490526001600160a01b039091169063c15da65b90602401600060405180830381600087803b158015610ff257600080fd5b505af1158015611006573d6000803e3d6000fd5b505050507f1245b881cb30fdad22b2f9fde2d5c2a3605bbdf272d5e8a2235d8c9e81aba2ce8260405161064f91815260200190565b604051630926f44b60e31b815260009073__$46fbdf6658faf65265971bdad66851b86c$__90634937a25890610be0908590600401611e94565b61107d61155c565b60006110a97f000000000000000000000000000000000000000000000000000000000000000042611cdf565b90507f000000000000000000000000000000000000000000000000000000000000000081116110eb57604051630931513d60e11b815260040160405180910390fd5b600a5460ff161561110f5760405163084ef7b960e41b815260040160405180910390fd5b600a805460ff1916600117905560115460408051630c0775ff60e31b815290516001600160a01b039092169163603baff8916004808201926020929091908290030181865afa158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a9190611ebc565b6001600160a01b031663b6a64acd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111eb9190611d21565b61120757604051624a03c360e31b815260040160405180910390fd5b60115460405163dd0982a360e01b8152600481018490526001600160a01b039091169063dd0982a3906024016020604051808303816000875af1158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190611cf2565b60095561128161169e565b60095481526010546001906112a19082906301000000900460ff16611ed9565b60ff16600581106112b4576112b4611d0b565b01546020820152600060408201526112cb8161137a565b600b556011546040805163122db15360e01b815290516001600160a01b039092169163122db153916004808201926020929091908290030181865afa158015611318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133c9190611cf2565b600d8190556009546040517fa80928657383ff9d374f1409cf51e7460a64472b6baeb5ded1199830c15bae0192610f29928252602082015260400190565b6040516304b98e1d60e31b815260009073__$fa059fb1da6d850ca47ea49359bfe89f78$__906325cc70e890610be0908590600401611ef2565b60065460ff16156113d8576040516342a2e18d60e01b815260040160405180910390fd5b6006805460ff19166001908117909155600c805482019055604080518082019091527f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f711815260006020820181905290918190819061143790859061065b565b601254604051631ffc735d60e01b81526004810183905293965091945092506001600160a01b031690631ffc735d906024016020604051808303816000875af1158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190611cf2565b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b8383604051610b98929190611f1a565b6114e661155c565b6001600160a01b0381166115505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b611559816115b6565b50565b6000546001600160a01b03163314610d325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611547565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051806040016040528060008152602001611620611625565b905290565b604051806101400160405280600a906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156116f5576116f56116bc565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611724576117246116bc565b604052919050565b600082601f83011261173d57600080fd5b6117456116d2565b80604084018581111561175757600080fd5b845b81811015611771578035845260209384019301611759565b509095945050505050565b6000806060838503121561178f57600080fd5b611799848461172c565b946040939093013593505050565b8051825260208082015181840160005b600a811015610db1578251825291830191908301906001016117b7565b6101c081016117e382866117a7565b83516101608301526020909301516101808201526101a00152919050565b600061016080838503121561181557600080fd5b61181d6116d2565b915082358252602084603f85011261183457600080fd5b604051610140810181811067ffffffffffffffff82111715611858576118586116bc565b60405291840191808684111561186d57600080fd5b8286015b848110156118885780358252908301908301611871565b5050908301525092915050565b6000604082840312156118a757600080fd5b6118af6116d2565b9050813581526020820135602082015292915050565b6000806101a083850312156118d957600080fd5b6118e38484611801565b91506118f3846101608501611895565b90509250929050565b6000806040838503121561190f57600080fd5b50508035926020909101359150565b6000808284036101a081121561193357600080fd5b61193d8585611801565b9250604061015f198201121561195257600080fd5b50610160830190509250929050565b60006080828403121561197357600080fd5b82601f83011261198257600080fd5b6040516080810181811067ffffffffffffffff821117156119a5576119a56116bc565b6040528060808401858111156119ba57600080fd5b845b818110156119d45780358352602092830192016119bc565b509195945050505050565b600060208083850312156119f257600080fd5b823567ffffffffffffffff80821115611a0a57600080fd5b818501915085601f830112611a1e57600080fd5b813581811115611a3057611a306116bc565b8060051b9150611a418483016116fb565b8181529183018401918481019088841115611a5b57600080fd5b938501935b83851015611a7957843582529385019390850190611a60565b98975050505050505050565b600060408284031215611a9757600080fd5b610df2838361172c565b60008060008060408587031215611ab757600080fd5b843567ffffffffffffffff80821115611acf57600080fd5b818701915087601f830112611ae357600080fd5b813581811115611af257600080fd5b88602061016083028501011115611b0857600080fd5b602092830196509450908601359080821115611b2357600080fd5b818701915087601f830112611b3757600080fd5b813581811115611b4657600080fd5b8860208260061b8501011115611b5b57600080fd5b95989497505060200194505050565b600060808284031215611b7c57600080fd5b6040516060810181811067ffffffffffffffff82111715611b9f57611b9f6116bc565b604052611bac8484611895565b815260408301356020820152606083013560408201528091505092915050565b600060208284031215611bde57600080fd5b5035919050565b600060a08284031215611bf757600080fd5b82601f830112611c0657600080fd5b60405160a0810181811067ffffffffffffffff82111715611c2957611c296116bc565b6040528060a08401858111156119ba57600080fd5b600060608284031215611c5057600080fd5b82601f830112611c5f57600080fd5b6040516060810181811067ffffffffffffffff82111715611c8257611c826116bc565b6040528060608401858111156119ba57600080fd5b6001600160a01b038116811461155957600080fd5b600060208284031215611cbe57600080fd5b8135610df281611c97565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c2157610c21611cc9565b600060208284031215611d0457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611d3357600080fd5b81518015158114610df257600080fd5b6101608101610c2182846117a7565b600060408284031215611d6457600080fd5b610df28383611895565b6101a08101611d7d82856117a7565b823561016083015260208301356101808301529392505050565b60808101818360005b6004811015611dbf578151835260209283019290910190600101611da0565b50505092915050565b815160009082906020808601845b83811015611df257815185529382019390820190600101611dd6565b50929695505050505050565b6000825160005b81811015611e1f5760208186018101518583015201611e05565b506000920191825250919050565b600082611e4a57634e487b7160e01b600052601260045260246000fd5b500690565b60408101818360005b6002811015611dbf578151835260209283019290910190600101611e58565b60006101608284031215611e8a57600080fd5b610df28383611801565b60a08101818360005b6005811015611dbf578151835260209283019290910190600101611e9d565b600060208284031215611ece57600080fd5b8151610df281611c97565b60ff8281168282160390811115610c2157610c21611cc9565b60608101818360005b6003811015611dbf578151835260209283019290910190600101611efb565b6101a08101611f2982856117a7565b82516101608301526020830151610180830152610df256fea26469706673582212204172a8d3e191cc04ccb8487326d5d5ae88b2ad179ba1309bc37535f39e74d70464736f6c63430008130033a2646970667358221220a414e18bfd9200065cdf43ca3bbb3a9380145dccf618ea8178c37e7fcd462f3a64736f6c63430008130033",
  "libraries": {
    "PoseidonT3": "0xf2e06d2452A0d124AF0F6b8e63662131729E7F0A",
    "PoseidonT4": "0x6397684f16b6bCe2f47D9C5d51DbE45c8d570937",
    "PoseidonT5": "0x9dE016B7bbbE32cb5E18163530b87F810e76483C",
    "PoseidonT6": "0x08979464144853c9a97a98a624597C4698acda8e"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)": {
        "params": {
          "_coordinatorPubKey": "The coordinator's public key",
          "_duration": "The duration of the poll",
          "_maci": "The MACI contract interface reference",
          "_maxValues": "The max values for the poll",
          "_pollOwner": "The owner of the poll",
          "_topupCredit": "The TopupCredit contract",
          "_treeDepths": "The depths of the merkle trees"
        },
        "returns": {
          "pollAddr": "The deployed Poll contract"
        }
      }
    },
    "title": "PollFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "constructor": {
        "notice": "The PollFactory constructor"
      },
      "deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)": {
        "notice": "Deploy a new Poll contract and AccQueue contract for messages."
      }
    },
    "notice": "A factory contract which deploys Poll contracts. It allows the MACI contract size to stay within the limit set by EIP-170.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}